[user]

	name = 50bhan
	email = Sobhan.Sharifi.Sadeghi@gmail.com

[github]

	user = 50bhan

[credential]

	helper = store

[init]

		# Default name of new branches (instead of master)
        defaultBranch = main

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	excludesfile = ~/.global-gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

    editor = vim

	filemode = false
	
	autocrlf = input

	pager = less --tabs=4 -RFX

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = green
	changed = red
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	#gpgsign = true

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
	default = current
	
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]

	# Make rebasing the default strategy
	rebase = true

[rebase]

	# Stash on rebase
	autoStash = true

[init]
	
	defaultBranch = main

[remote "origin"]

	# Cleans out your local git from tracking branches that don't exist anymore.
	prune = true

[alias]

	st = status

	sts = status -sb

	cm = commit -v

	initial = !git add . && git commit -m \"${1:-ðŸŽ‰ First commit}\"

	first = log --pretty='%C(yellow)commit %H%nDate:\t%ad%nAuthor: %an <%ae>%n%n\t%s' --max-parents=0

	mine = log --author="Sobhan Sharifi"

  	wip = !git add . && git commit -m "WIP"

	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

	lgp = lg -p

	unstage = reset --
	
	undo = reset HEAD~1 --mixed

	undo-initial = !git update-ref -d HEAD && git rm --cached -r .

	discard = checkout -- .

	# Discard all changes from current repo and its submodules
	discard-submodules = !git submodule deinit -f . && git submodule update --init
	
	# Remove untracked files and directories from the working tree
	pristine = clean -fd

	# Exclude files in local repository
	exclude = ! echo $2 >> .git/info/exclude && git update-index --assume-unchanged $2

	staged = diff --cached

	# Create new branch
	new = !"git checkout -b $2"
	
	# Return to previous branch
	back = checkout -

	# Stash current changes and checkout to target branch
	change = !"git stash && git switch $2"

	# Remove all local branches except master
	clean-branches = !"git branch | grep -ve " master$" | xargs git branch -D"

	# Update local branch list with all new ones from the remote and remove any that are no longer there
	update-branches= !"git remote update --prune"

	# Update submodules to latest tips of remote branches
	update-submodules= !"git submodule update --recursive --remote"

	# List all of the commits after current user latest commit
	after = !"git log $1@{1}..$1@{0} "$@""

	# Fetch all branches from all remotes and clean outdated branches
	sync = fetch --all --prune

	# Sync a fork with latest changes on upstream
	sync-fork = !git fetch upstream && git checkout master && git merge upstream/master && git push

	# Squash all git commits into one single commit
	squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-ðŸŽ‰ First commit}\");};f"

	# Show the diff between the latest commit and the current state
	df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat --color-moved"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	dfi = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	please = push --force-with-lease

	force = push --force

	# Pull in remote changes for the current repository and all its submodules
	pull = git pull --recurse-submodules

	# forced pull: You have a local branch (e.g. for reviewing), but someone else did a forced push
	#              update on the remote branch. A regular git pull will fail, but this will just set
	#              the local branch to match the remote branch. BEWARE: this will overwrite any local
	#              commits you have made on this branch that haven't been pushed.
	pull-force = !sh -c \"git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)\"

	# Push all local branches and tags to remote
	push-all = push --all origin
	
	# Given a merge commit, find the span of commits that exist(ed) on that branch.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"

	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"

	# Show verbose output
	tags = tag -l
	branches = "!git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD) %(refname:short) %(color:green)%(committerdate:relative) %(color:yellow)%(subject) %(color:magenta)%(authorname)%(color:reset)'"
	remotes = remote -v
	stashes = stash list